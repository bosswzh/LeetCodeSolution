public class Solution {
    public boolean search(int[] nums, int target) {
        return search(nums, target, 0, nums.length-1);
    }

    private boolean search(int[] nums, int target, int s, int e) {
        if(s > e) return false;
        int m = (s + e)/2;
        int pivot = nums[m];
        if(pivot == target) return true;
        else if(nums[s] == pivot) {
            while(s <= e && nums[s] == pivot) ++s;
            return search(nums, target, s, e);
        }
        else if(nums[s] < pivot) {
            if(target >= nums[s] && target < pivot)
                return search(nums, target, s, m - 1);
            else
                return search(nums, target, m + 1, e);
        }
        else {
            if(target <= nums[e] && target > pivot)
                return search(nums, target, m + 1, e);
            else
                return search(nums, target, s, m - 1);
        }
    }
}
