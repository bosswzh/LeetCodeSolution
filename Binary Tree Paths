/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> list = new ArrayList<String>();
        binaryTreePaths(root, "", list);
        return list;
    }

    private void binaryTreePaths(TreeNode root, String pre, List<String> list) {
    	if(root == null) return;
    	if(root.left == null && root.right == null) list.add(pre + root.val);
    	if(root.left != null) binaryTreePaths(root.left, pre + root.val + "->", list);
    	if(root.right != null) binaryTreePaths(root.right, pre + root.val + "->", list);
    }
}

/* 自底向上 */
public class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> list = new ArrayList<String>();
        if(root == null) return list;
    	if(root.left == null && root.right == null)
    		list.add(Integer.toString(root.val));
    	if(root.left != null) 
    		for(String s : binaryTreePaths(root.left))
    			list.add(root.val + "->" + s);
    	if(root.right != null) 
    		for(String s : binaryTreePaths(root.right))
    			list.add(root.val + "->" + s);
    	return list;
    }
}