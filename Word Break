public class Solution {
    public boolean wordBreak(String s, Set<String> wordDict) {
        boolean[] visited = new boolean[s.length()];
        return wordBreak(s, wordDict, 0, visited);
    }

    private boolean wordBreak(String s, Set<String> wordDict, int start, boolean[] visited) {
    	if(visited[start]) return false;
    	visited[start] = true;
        for(int i=start+1; i<=s.length(); i++) {
        	if(wordDict.contains(s.substring(start, i)))
        		if(i == s.length() || wordBreak(s, wordDict, i, visited))
        			return true;
        }
        return false;
    }
}


/* 都懒得写了，直接贴来 */
public boolean wordBreak(String s, Set<String> wordDict) {
    int maxWord = getMax(wordDict);
    int len = s.length();
    boolean[] dp = new boolean[len + 1];
    dp[0] = true;
    for (int i = 1; i <= len; i ++) {
        int start = Math.max(1, i - maxWord);
        for (int j = start; j <= i; j++) {
            if (dp[j - 1] && wordDict.contains(s.substring(j - 1, i))) {
                dp[i] = true; 
                break;
            }
        }
    }
    return dp[len];
}

private int getMax(Set<String> wordDict) {
    int max = 0;
    for (String str : wordDict) {
        max = Math.max(max, str.length());
    }
    return max;
}