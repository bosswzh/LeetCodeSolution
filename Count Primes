public class Solution {
    public int countPrimes(int n) {
        boolean[] isPrime = new boolean[n];
        for(int i=0; i<n; i++)
        	isPrime[i] = true;
        int count = 0, j;
        double sq = Math.sqrt(n);
        for(int i=2; i<n; i++) {
        	if(isPrime[i]) {
        		++count;
        		if(i < sq) {
	        		j = i * i;
	        		while(j < n) {
	        			isPrime[j] = false;
	        			j += i;
	        		}
        		}
        	}
        }
        return count;
    }
}

/* 修改计数方式，提升删除的检测 */
public class Solution {
    public int countPrimes(int n) {
    	if(n < 3) return 0;

        boolean[] deleted = new boolean[n];
        int sq = (int)Math.sqrt(n);
        int count = n/2;

        for(int i=3; i<=sq; i+=2)
        	if(!deleted[i]) {
        		for(int j=i*i; j<n; j+=i*2) {
        			count -= deleted[j] ? 0 : 1; // 比if快
        			deleted[j] = true;
        		}
        	}

        return count;
    }
}