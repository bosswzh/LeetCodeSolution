/* 初次写法 */
public class Solution {
    public int majorityElement(int[] nums) {
        if(nums == null || nums.length == 0)
            return -1;

        HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();
        for(int i=0; i<nums.length; i++) {
            if(hm.containsKey(nums[i]))
                hm.put(nums[i], hm.get(nums[i])+1);
            else
                hm.put(nums[i], 1);
        }

        Iterator<HashMap.Entry<Integer, Integer>> it = hm.entrySet().iterator();
        HashMap.Entry<Integer, Integer> en = it.next();
        int maxV = en.getValue();
        int maxK = en.getKey();
        while(it.hasNext()) {
            en = it.next();
            if(maxV < en.getValue()) {
                maxV = en.getValue();
                maxK = en.getKey();
            }
        }

        return maxK;
    }
}

/* 选择最高可以直接由比较完成 */
public class Solution {
    public int majorityElement(int[] nums) {
        if(nums == null || nums.length == 0)
            return -1;
        int bar = nums.length / 2 + 1;

        HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>();
        for(int i=0; i<nums.length; i++) {
            if(hm.containsKey(nums[i]))
                hm.put(nums[i], hm.get(nums[i])+1);
            else
                hm.put(nums[i], 1);
            if(hm.get(nums[i] >= bar)) return nums[i];
        }
        return -1;
    }
}

/* 排序使用好多题目 */
public int majorityElement2(int[] nums) {
    Arrays.sort(nums);
    return nums[nums.length/2];
}


/* Moore's majority vote solutions */
public class Solution {
    public int majorityElement(int[] nums) {
        int major = nums[0];
        int count = 0;
        for(int i=0; i<nums.length; i++) {
            if(nums[i] == major) ++count;
            else if(count == 0) {
                major = nums[i];
                count = 1;
            }
            else --count;
        }
        return major;
    }
}