public class Solution {
    public boolean isValidSudoku(char[][] board) {
        Checker c = new Checker();
        return c.check_line(board) && c.check_column(board) && c.check_square(board);
    }

    class Checker {
    	boolean[] seen = new boolean[9];
    	public boolean check_line(char[][] board) {
    		for(int line = 0; line < 9; line++) {
	    		for(int i=0; i<9; i++)
	    			seen[i] = false;
	    		for(int i=0; i<9; i++) {
	    			int tmp = board[line][i] - '1';
	    			if(tmp > 8 || tmp < 0) continue;
	    			if(seen[tmp]) return false;
	    			else seen[tmp] = true;
	    		}
    		}
    		return true;
    	}

    	public boolean check_column(char[][] board) {
    		for(int column = 0; column < 9; column++) {
	    		for(int i=0; i<9; i++)
	    			seen[i] = false;
	    		for(int i=0; i<9; i++) {
	    			int tmp = board[i][column] - '1';
	    			if(tmp > 8 || tmp < 0) continue;
	    			if(seen[tmp]) return false;
	    			else seen[tmp] = true;
	    		}
    		}
    		return true;
    	}

    	public boolean check_square(char[][] board) {
    		for(int m=0; m<9; m = m + 3)
    			for(int n=0; n<9; n = n + 3) {
		    		for(int i=0; i<9; i++)
		    			seen[i] = false;
		    		for(int i=0; i<3; i++) {
		    			for(int j=0; j<3; j++) {
		    				int tmp = board[m+i][n+j] - '1';
	    					if(tmp > 8 || tmp < 0) continue;
		    				if(seen[tmp]) return false;
		    				else seen[tmp] = true;
		    			}
		    		}
    			}
    		return true;
    	}
    }
}


/* 扫描一遍，转换所在 */
public class Solution {
	public static boolean isValidSudoku(char[][] board) {
        Set<Character>[] setXX = new HashSet[9];
        Set<Character>[] setYY = new HashSet[9];
        Set<Character>[] setXY = new HashSet[9];
        for (int i = 0; i < 9; i++) {
            setXX[i] = new HashSet<>();
            setYY[i] = new HashSet<>();
            setXY[i] = new HashSet<>();
        }

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == '.') {
                    continue;
                }
                if(!setXX[i].add(board[i][j])){
                    return false;
                }
                if(!setYY[j].add(board[i][j])){
                    return false;
                }
                if(!setXY[(j / 3)* 3 + i / 3].add(board[i][j])){
                    return false;
                }
            }
        }
        return true;
	}
}
