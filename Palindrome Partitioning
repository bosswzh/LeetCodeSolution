/* DP */
public class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>>[] res = (List<List<String>>[]) new ArrayList[s.length()]; //sdfsdf
        if(s == null) return new ArrayList<List<String>>();
        for(int i=res.length-1; i>=0; i--) {
        	res[i] = new ArrayList<List<String>>();
        	List<String> onePar;
        	if(isParlindorme(s.substring(i))) {
        		onePar = new ArrayList<String>();
        		onePar.add(s.substring(i));
        		res[i].add(onePar);
        	}
        	for(int j=i+1; j<s.length(); j++) {
        		if(isParlindorme(s.substring(i, j))) {
        			for(List<String> list : res[j]) {
        				onePar = new ArrayList<String>();
        				onePar.add(s.substring(i, j));
        				onePar.addAll(list);
        				res[i].add(onePar);
        			}
        		}
        	}
        }
        return res[0];
    }

    private boolean isParlindorme(String s) {
    	if(s.length() <= 1) return true;
    	char[] charseq = s.toCharArray();
    	int i=0, j=charseq.length-1;
    	while(i<j) {
    		if(charseq[i++] != charseq[j--]) return false;
    	}
    	return true;
    }
}

/* DFS */
public class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        boolean[][] dp = new boolean[s.length()][s.length()];
        for(int i = 0; i < s.length(); i++) {
            for(int j = 0; j <= i; j++) {
                if(s.charAt(i) == s.charAt(j) && (i - j <= 2 || dp[j+1][i-1])) {
                    dp[j][i] = true;
                }
            }
        }
        helper(res, new ArrayList<>(), dp, s, 0);
        return res;
    }

    private void helper(List<List<String>> res, List<String> path, boolean[][] dp, String s, int pos) {
        if(pos == s.length()) {
            res.add(new ArrayList<>(path));
            return;
        }

        for(int i = pos; i < s.length(); i++) {
            if(dp[pos][i]) {
                path.add(s.substring(pos,i+1));
                helper(res, path, dp, s, i+1);
                path.remove(path.size()-1);
            }
        }
    }
}