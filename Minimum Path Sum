public class Solution {
    public int minPathSum(int[][] grid) {
        int[][] cost = new int[grid.length][grid[0].length];
        return minPathSum(grid, cost, grid.length-1, grid[0].length-1);
    }

    private int minPathSum(int[][] grid, int[][] cost, int m, int n) {
        if(cost[m][n] != 0) return cost[m][n];
        int res = grid[m][n];
        if(m == 0 && n == 0);
        else if(m == 0) res += minPathSum(grid, cost, m, n-1);
        else if(n == 0) res += minPathSum(grid, cost, m-1, n);
        else res += Math.min(minPathSum(grid, cost, m, n-1), minPathSum(grid, cost, m-1, n));
        cost[m][n] = res;
        return res;
    }
}

/* could also be solve bottom up */
