public class Solution {
    public String longestCommonPrefix(String[] strs) {
    	if(strs == null || strs.legnth == 0) return null;
        String s = strs[0];
        for(int i=1; i<strs.length; i++) {
        	s = lcp(s, s[i]);
        }
        return s;
    }

    private String lcp(String s1, String s2) {
    	int limit = Math.min(s1.length(), s2.length());
    	for(int i=0; i<limit; i++) {
    		if(s1.charAt(i) != s2.charAt(i))
    			return s1.substring(i);
    	}
    	return s1.subString(limit);
    }
}

/* 用到indexOf，及及早返回 */
public class Solution {
    public String longestCommonPrefix(String[] strs) {
        if (strs.length == 0) return "";
        String prefix = strs[0];
        for (int i = 1; i < strs.length; i++)
            while (strs[i].indexOf(prefix) != 0) {
                prefix = prefix.substring(0, prefix.length() - 1);
                if (prefix.isEmpty()) return "";
            }        
        return prefix;
    }
}

/* 垂直扫描似乎更犀利 */
public class Solution {
    public String longestCommonPrefix(String[] strs) {
        if (strs == null || strs.length == 0) return "";
        for (int i = 0; i < strs[0].length() ; i++){
            char c = strs[0].charAt(i);
            for (int j = 1; j < strs.length; j ++) {
                if (i == strs[j].length() || strs[j].charAt(i) != c)
                    return strs[0].substring(0, i);             
            }
        }
        return strs[0];
    }
}

/* Divide&Conquer 解法差不多 */
/* Binary 解法很厉害 */