public class Solution {
    public int reverseBits(int n) {
        int t = 0;
        int i = -2147483648;
        int j = 1;
        for(int k=0; k < 32; k++) {
        	if((n & i) != 0) t = (t | j);
        	i = i >>> 1;
        	j = j << 1;
        }
        return t;
    }
}

/* 省去判断 */
public class Solution {
    public int reverseBits(int n) {
        int reverse = 0;
        for (int i = 0; i < 32; i++) {
            reverse |= ((n >>> i) & 1) << (31 - i);
        }
        return reverse;
    }
}

/* String */
public class Solution {
    public int reverseBits(int n) {
    	StringBuffer sb = new StringBuffer();
    	String s = Integer.toBinaryString(n);
    	for(int i = 0; i<32-s.length(); i++) {
    		sb.append('0');
    	}
    	char[] c = sb.append(s).toString().toCharArray();

    	int t = 0;
    	int w = 1;
    	for(int i = 0; i<32; i++) {
    		if(c[31-i] != '0')
    			t = (t | w);
    		w <<= 1;
    	}
    }
}

/* Bit */
public class Solution {
    public int reverseBits(int n) {
    	n = ((n & 0xFFFF0000) >>> 16) | ((n & 0x0000FFFF) << 16);
    	n = ((n & 0xFF00FF00) >>> 8)  | ((n & 0x00FF00FF) << 8);
    	n = ((n & 0xF0F0F0F0) >>> 4)  | ((n & 0x0F0F0F0F) << 4);
    	n = ((n & 0xCCCCCCCC) >>> 2)  | ((n & 0x33333333) << 2);
    	n = ((n & 0xAAAAAAAA) >>> 1)  | ((n & 0x55555555) << 1);
    	return n;
    }
}